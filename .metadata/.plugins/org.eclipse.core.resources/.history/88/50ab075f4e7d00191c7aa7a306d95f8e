package com.app.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.xml.parsers.ParserConfigurationException;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.xml.sax.SAXException;

@RestController
@Controller
@RequestMapping(value = "/getWarDetails")
public class ReleaseInfoController {

	@RequestMapping(value = "/Info",method = RequestMethod.GET)
	public ModelAndView getReleaseInformation() throws IOException, ParserConfigurationException, SAXException{
		Runtime runTime=Runtime.getRuntime();
		long maxMemory = runTime.maxMemory();
		System.out.println(runTime.totalMemory());
		System.out.println(runTime.freeMemory());
		System.out.println(runTime.totalMemory()-runTime.freeMemory());
		
		ModelAndView model=new ModelAndView("warInfo");
		List<String> listWar = null;
		File directory = new File("C://");
		File[] filesInfo = directory.listFiles();
		String absolutePath = directory.getAbsolutePath();
		System.out.println("absolutePath :: "+absolutePath);
		if (filesInfo.length > 0) {
			listWar = new ArrayList<String>();
			for (File file : filesInfo) {
				boolean war = file.getName().endsWith(".zip");
				if (war == true) {
					listWar.add(file.getName());
					ZipFile zipFile = new ZipFile(absolutePath+""+file.getName());
					System.out.println("zipFile :: "+zipFile.getName());
		            Enumeration<? extends ZipEntry> entries = zipFile.entries();
		            while (entries.hasMoreElements()) {
		                ZipEntry entry = entries.nextElement();
		                System.out.println("entry :: "+entry);
		                String name = entry.getName();
		                if(name.endsWith("/pom.xml")) {
		                	System.out.println("name : "+name);
		                	File pom = new File(name);
		                	
		                	String exractedFile =  entry.getName();
		                    FileOutputStream fos = null;

		                    try {
		                        fos = new FileOutputStream(exractedFile);
		                        final byte[] buf = new byte[BUFFER_SIZE];
		                        int read = 0;
		                        int length;

		                        while ((length = is.read(buf, 0, buf.length)) >= 0) {
		                            fos.write(buf, 0, length);
		                        }

		                    } catch (IOException ioex) {
		                        fos.close();
		                    }
		                	
		                	
		                	
		                	InputStream stream = zipFile.getInputStream(entry.getName());
		                	
		                }
					}

				}
			}
		}
		model.addObject("list", listWar);
		return model;
	}
	
	public void pomVersion(String pomLocation) throws IOException {
		ZipFile zipFile = new ZipFile(pomLocation);
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = entries.nextElement();
            String name = entry.getName();
            if(name.endsWith("/pom.xml")) {
            	System.out.println("name : "+name);
            	File pom = new File(name);
            	
            }
		}
	}

}
